architectury {
    platformSetupLoomIde()
    loader("quilt")
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        client {
            if (project.hasProperty("username") && project.hasProperty("uuid")) {
                programArgs "--username=${username}", "--uuid=${uuid}"
            }
            property "mixin.debug.export", "true"
            property "mixin.hotSwap", "true"
            property "loader.workaround.disable_strict_parsing", "true"
        }
        server {
            property "mixin.debug.export", "true"
            property "mixin.hotSwap", "true"
            property "loader.workaround.disable_strict_parsing", "true"
        }
    }

    mixin {
        defaultRefmapName = "mixins.fishofthieves_quilt.refmap.json"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

repositories {
    maven {
        name "ModMenu Maven"
        url "https://maven.quiltmc.org/repository/release/"
    }
    maven {
        name "ModMenu Maven"
        url "https://maven.terraformersmc.com/releases/"
        content {
            includeGroup "com.terraformersmc"
        }
    }
    maven {
        name "Modrinth Maven"
        url "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:${rootProject.quilt_loader_version}"
    modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${rootProject.quilt_fabric_api_version}"
    modApi("com.terraformersmc:modmenu:${modmenu_version}") {
        exclude group: "net.fabricmc.fabric-api"
        exclude group: "net.fabricmc", module: "fabric-loader"
    }
    modLocalRuntime "maven.modrinth:lazydfu:0.1.3"

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude group: "net.fabricmc.fabric-api"
        exclude group: "net.fabricmc", module: "fabric-loader"
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
}

processResources {
    inputs.property "group", rootProject.maven_group
    inputs.property "version", rootProject.mod_version

    filesMatching("quilt.mod.json") {
        expand "group": rootProject.maven_group, "version": project.mod_version
    }
}

String fileName = "${archives_base_name}-mc${mc_version}"

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
    exclude("architectury.common.json")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    exclude("architectury.common.json")
}

remapSourcesJar {
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "quilt" + (project.release_type != "release" ? "-" + project.release_type : "")
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

afterEvaluate {
    loom {
        runs {
            configureEach {
                def mixinJarFile = configurations.compileClasspath.files { it.group == "net.fabricmc" && it.name == "sponge-mixin" }.first()
                vmArg("-javaagent:$mixinJarFile")
            }
        }
    }
}